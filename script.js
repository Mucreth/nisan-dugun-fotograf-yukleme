document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('file-upload');
    const uploadContainer = document.querySelector('.upload-container');
    const progressContainer = document.getElementById('upload-progress');
    const successMessage = document.getElementById('success-message');
    const uploadMoreBtn = document.getElementById('upload-more-btn');
    const fileListContainer = document.getElementById('file-list');
    const startUploadBtn = document.getElementById('start-upload-btn');
    
    // Dosya se√ßme alanƒ±na tƒ±klanƒ±nca input'u aktif et
    uploadContainer.addEventListener('click', function() {
        fileInput.click();
    });
    
    // Dosya se√ßildiƒüinde
    fileInput.addEventListener('change', function(e) {
        if (fileInput.files.length > 0) {
            // Dosya listesini g√∂r√ºnt√ºle
            showSelectedFiles(fileInput.files);
            
            // Y√ºkleme butonunu g√∂ster
            startUploadBtn.style.display = 'block';
        }
    });
    
    // Y√ºkleme ba≈ülatma butonu i√ßin event listener
    startUploadBtn.addEventListener('click', function() {
        if (fileInput.files.length > 0) {
            uploadFiles(fileInput.files);
            // Y√ºkleme butonu gizle
            this.style.display = 'none';
        }
    });
    
    // Y√ºkleme tamamlandƒ±ktan sonra tekrar y√ºkleme yapmak i√ßin
    uploadMoreBtn.addEventListener('click', function() {
        resetUploadUI();
    });
    
    // Sayfa yenilendiƒüinde ba≈üa d√∂n
    window.addEventListener('beforeunload', function() {
        window.scrollTo(0, 0);
    });
    
    // Se√ßilen dosyalarƒ± listele
    function showSelectedFiles(files) {
        // Mevcut dosya listesini temizle
        fileListContainer.innerHTML = '';
        fileListContainer.style.display = 'block';
        
        // Her dosya i√ßin bir liste √∂ƒüesi olu≈ütur
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.dataset.index = i;
            
            // Dosya t√ºr√ºn√º belirle ve thumbnail olu≈ütur
            let thumbnailHTML = '';
            if (file.type.startsWith('image/')) {
                // Resim dosyasƒ± i√ßin
                thumbnailHTML = `<div class="file-thumbnail">
                    <img src="${URL.createObjectURL(file)}" alt="${file.name}">
                </div>`;
            } else if (file.type.startsWith('video/')) {
                // Video dosyasƒ± i√ßin
                thumbnailHTML = `<div class="file-thumbnail video">
                    <span class="video-icon">‚ñ∂</span>
                </div>`;
            } else {
                // Diƒüer dosya t√ºrleri i√ßin (iPhone'dan gelen HEIC gibi)
                const fileExt = file.name.split('.').pop().toLowerCase();
                if (fileExt === 'heic') {
                    thumbnailHTML = `<div class="file-thumbnail image">
                        <span class="file-icon">üñºÔ∏è</span>
                    </div>`;
                } else {
                    thumbnailHTML = `<div class="file-thumbnail other">
                        <span class="file-icon">üìÑ</span>
                    </div>`;
                }
            }
            
            // Dosya bilgileri ve ilerleme √ßubuƒüu
            fileItem.innerHTML = `
                ${thumbnailHTML}
                <div class="file-info">
                    <div class="file-name">${file.name}</div>
                    <div class="file-size">${formatFileSize(file.size)}</div>
                    <div class="file-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: 0%"></div>
                        </div>
                        <div class="progress-text">Bekliyor...</div>
                    </div>
                </div>
                <div class="file-actions">
                    <button class="remove-file-btn" data-index="${i}">‚ùå</button>
                </div>
            `;
            
            fileListContainer.appendChild(fileItem);
        }
        
        // Dosya kaldƒ±rma butonlarƒ± i√ßin event listener
        const removeButtons = document.querySelectorAll('.remove-file-btn');
        removeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const index = parseInt(this.dataset.index);
                removeFileFromList(index);
            });
        });
    }
    
    // Dosya listesinden bir dosyayƒ± kaldƒ±r
    function removeFileFromList(index) {
        // FileList doƒürudan manip√ºle edilemez, yeni bir DataTransfer olu≈ütur
        const dt = new DataTransfer();
        
        // Se√ßili t√ºm dosyalarƒ± al
        const files = fileInput.files;
        
        // Belirtilen index dƒ±≈üƒ±ndaki t√ºm dosyalarƒ± yeni listeye ekle
        for (let i = 0; i < files.length; i++) {
            if (i !== index) {
                dt.items.add(files[i]);
            }
        }
        
        // Yeni dosya listesini input'a ata
        fileInput.files = dt.files;
        
        // Dosya listesini g√ºncelle
        if (fileInput.files.length > 0) {
            showSelectedFiles(fileInput.files);
        } else {
            fileListContainer.innerHTML = '';
            fileListContainer.style.display = 'none';
            startUploadBtn.style.display = 'none';
        }
    }
    
    // Dosya boyutunu formatla
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    function uploadFiles(files) {
        // Her dosya i√ßin ayrƒ± XHR isteƒüi olu≈ütur ve y√ºkle
        for (let i = 0; i < files.length; i++) {
            uploadSingleFile(files[i], i);
        }
    }
    
    function uploadSingleFile(file, index) {
        // ƒ∞lgili dosya √∂ƒüesini bul
        const fileItem = document.querySelector(`.file-item[data-index="${index}"]`);
        const progressFill = fileItem.querySelector('.progress-fill');
        const progressText = fileItem.querySelector('.progress-text');
        
        // Durumu "Y√ºkleniyor" olarak deƒüi≈ütir
        progressText.textContent = 'Y√ºkleniyor... 0%';
        
        // FormData olu≈ütur
        const formData = new FormData();
        formData.append('files[]', file);
        
        // XHR ile dosyayƒ± y√ºkle
        const xhr = new XMLHttpRequest();
        
        // Progress olayƒ±
        xhr.upload.addEventListener('progress', function(e) {
            if (e.lengthComputable) {
                const percentComplete = (e.loaded / e.total) * 100;
                progressFill.style.width = percentComplete + '%';
                progressText.textContent = 'Y√ºkleniyor... ' + Math.round(percentComplete) + '%';
            }
        });
        
        // Y√ºkleme tamamlandƒ±ƒüƒ±nda
        xhr.addEventListener('load', function() {
            if (xhr.status >= 200 && xhr.status < 300) {
                try {
                    const response = JSON.parse(xhr.responseText);
                    
                    // Sunucudan gelen cevabƒ± kontrol et (ba≈üarƒ±lƒ± mƒ±?)
                    const fileResponse = response[0]; // ƒ∞lk √∂ƒüe (tek dosya y√ºkl√ºyoruz)
                    
                    if (fileResponse && fileResponse.status === 'success') {
                        // Ba≈üarƒ±lƒ± yanƒ±t
                        progressFill.style.width = '100%';
                        progressText.textContent = 'Tamamlandƒ±';
                        fileItem.classList.add('uploaded');
                    } else {
                        // Sunucu hatasƒ±
                        progressFill.style.width = '100%';
                        progressFill.style.backgroundColor = '#dc3545';
                        progressText.textContent = fileResponse ? fileResponse.message : 'Y√ºkleme hatasƒ±';
                        fileItem.classList.add('error');
                    }
                } catch (error) {
                    // JSON parse hatasƒ±
                    progressFill.style.width = '100%';
                    progressFill.style.backgroundColor = '#dc3545';
                    progressText.textContent = 'Sunucu yanƒ±tƒ± anla≈üƒ±lamadƒ±';
                    fileItem.classList.add('error');
                }
            } else {
                // HTTP hatasƒ±
                progressFill.style.width = '100%';
                progressFill.style.backgroundColor = '#dc3545';
                progressText.textContent = 'Sunucu hatasƒ±: ' + xhr.status;
                fileItem.classList.add('error');
            }
            
            // T√ºm dosyalar y√ºklendi mi kontrol et
            checkAllUploadsComplete();
        });
        
        // Baƒülantƒ± hatasƒ±
        xhr.addEventListener('error', function() {
            progressFill.style.width = '100%';
            progressFill.style.backgroundColor = '#dc3545';
            progressText.textContent = 'Baƒülantƒ± hatasƒ±';
            fileItem.classList.add('error');
            
            // T√ºm dosyalar y√ºklendi mi kontrol et
            checkAllUploadsComplete();
        });
        
        // ƒ∞stek timeout
        xhr.addEventListener('timeout', function() {
            progressFill.style.width = '100%';
            progressFill.style.backgroundColor = '#dc3545';
            progressText.textContent = 'Zaman a≈üƒ±mƒ±';
            fileItem.classList.add('error');
            
            // T√ºm dosyalar y√ºklendi mi kontrol et
            checkAllUploadsComplete();
        });
        
        // ƒ∞steƒüi g√∂nder
        xhr.open('POST', 'upload.php');
        xhr.send(formData);
    }
    
    // T√ºm dosyalarƒ±n y√ºklenip y√ºklenmediƒüini kontrol et
    function checkAllUploadsComplete() {
        const totalItems = document.querySelectorAll('.file-item').length;
        const completedItems = document.querySelectorAll('.file-item.uploaded, .file-item.error').length;
        
        // T√ºm dosyalar y√ºklendiyse (ba≈üarƒ±lƒ± veya hatalƒ±)
        if (completedItems >= totalItems) {
            // Ba≈üarƒ± mesajƒ±nƒ± g√∂ster
            successMessage.style.display = 'block';
            
            // Ba≈üarƒ±lƒ± ve hatalƒ± dosya sayƒ±larƒ±nƒ± al
            const successCount = document.querySelectorAll('.file-item.uploaded').length;
            const errorCount = document.querySelectorAll('.file-item.error').length;
            
            // Ba≈üarƒ± mesajƒ±nƒ± g√ºncelle
            const successText = document.querySelector('#success-message p');
            
            if (errorCount === 0) {
                successText.textContent = `T√ºm dosyalar ba≈üarƒ±yla y√ºklendi! Payla≈üƒ±mƒ±nƒ±z i√ßin te≈üekk√ºr ederiz.`;
            } else if (successCount === 0) {
                successText.textContent = `Hi√ßbir dosya y√ºklenemedi. L√ºtfen tekrar deneyin.`;
                successMessage.style.backgroundColor = '#f8d7da';
                successMessage.style.borderColor = '#f5c6cb';
                successMessage.style.color = '#721c24';
            } else {
                successText.textContent = `${successCount} dosya ba≈üarƒ±yla y√ºklendi, ${errorCount} dosya y√ºklenemedi. Payla≈üƒ±mƒ±nƒ±z i√ßin te≈üekk√ºr ederiz.`;
                successMessage.style.backgroundColor = '#fff3cd';
                successMessage.style.borderColor = '#ffeeba';
                successMessage.style.color = '#856404';
            }
        }
    }
    
    function resetUploadUI() {
        successMessage.style.display = 'none';
        fileListContainer.innerHTML = '';
        fileListContainer.style.display = 'none';
        uploadContainer.style.display = 'block';
        startUploadBtn.style.display = 'none';
        
        // Ba≈üarƒ± mesajƒ±nƒ± varsayƒ±lan hale getir
        successMessage.style.backgroundColor = '#dff0d8';
        successMessage.style.borderColor = '#d6e9c6';
        successMessage.style.color = '#3c763d';
        
        // Dosya input'unu temizle
        fileInput.value = '';
    }
});

// Dosya s√ºr√ºkle-bƒ±rak desteƒüi ekleyelim
document.addEventListener('DOMContentLoaded', function() {
    const dropArea = document.querySelector('.container');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });
    
    function highlight() {
        dropArea.classList.add('highlight');
    }
    
    function unhighlight() {
        dropArea.classList.remove('highlight');
    }
    
    dropArea.addEventListener('drop', handleDrop, false);
    
    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        
        // Dosyalar varsa
        if (files.length > 0) {
            const fileInput = document.getElementById('file-upload');
            
            // DataTransfer API kullanarak dosyalarƒ± input'a aktar
            const newDT = new DataTransfer();
            for (let i = 0; i < files.length; i++) {
                newDT.items.add(files[i]);
            }
            fileInput.files = newDT.files;
            
            // Change event'ini manuel tetikle
            const event = new Event('change');
            fileInput.dispatchEvent(event);
        }
    }
});
